{"version":3,"sources":["components/GameBoard/GameBoardCell.js","components/GameBoard/GameBoard.js","components/Game/game-logic.js","components/GameSettings/GameSettings.js","components/GameBar/GameBar.js","components/GameOver/GameOver.js","components/Game/Game.js","App.js","serviceWorker.js","index.js","assets/svg/bomb.svg","assets/svg/flag.svg","assets/svg/superman_symbol_color.svg","assets/svg/superman_symbol_gray.svg"],"names":["Container","styled","div","_templateObject","_ref","isRevealed","isFlagged","isSupermanMode","css","_templateObject2","_ref2","_templateObject3","Item","_templateObject4","FlagImage","img","_templateObject5","BombImage","_templateObject6","GameBoardCell","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCellClick","bind","assertThisInitialized","event","_this$props","props","onClick","row","column","shiftKey","_this$props2","isMine","numberOfNearbyMines","ItemContent","react_default","a","createElement","src","Flag","alt","Bomb","style","color","getNumberOfNearbyMinesItemContentColor","_this$props3","renderItemContent","PureComponent","GameBoard_templateObject","GameBoard","board","onCellClick","GameBoard_Container","map","rowIndex","key","cell","columnIndex","GameBoard_GameBoardCell","assign","Component","createNewGameObject","width","height","mines","gameBoard","generateGameBoard","flags","incorrectFlags","isWin","isLose","isSupermenMode","Array","from","length","value","setMinesCells","setNonMinesCells","forEach","countCellNearbyMines","revealBoard","isRevealableCell","nearbyMines","getCellAdjacentCells","reduce","totalMines","gameBoardWidth","gameBoardHeight","cellRow","cellColumn","adjacentCells","push","minesCellsNumbers","Set","totalCellsNumber","mineSet","randomCellNumber","Math","floor","random","has","add","mineCellNumber","handleRevealCell","emptyCellsToReveal","emptyCellToReveal","pop","emptyCellsAdjacent","filter","concat","revealCell","DEFAULT_WIDTH","DEFAULT_HEIGHT","DEFAULT_MINES","GameSettings_templateObject","TextFieldContainer","GameSettings_templateObject2","GameSettings","state","persistState","handleInputChange","handleStartNewGame","setState","objectSpread","JSON","parse","localStorage","getItem","window","addEventListener","removeEventListener","setItem","stringify","defineProperty","target","name","onStartNewGame","_this$state","parseInt","totalNumberOfCells","Number","isInteger","ceil","_this$state2","GameSettings_Container","TextField_default","id","label","onChange","type","Button_default","variant","GameBar_templateObject","BarItem","GameBar_templateObject2","GameBar_templateObject3","SupermanModeImage","GameBar_templateObject4","GameBar","handleSupermanModeChange","onSupermanModeChange","GameBar_Container","GameBar_BombImage","SupermanModeOn","SupermanModeOff","GameOver_templateObject","GameOver","GameOver_Container","Game_templateObject","Game","openSnackbar","snakebarMessage","handleGameBoardCellClick","handleSnackbarClose","isShiftKey","updateGameData","flagsNewValue","handleChangeCellFlagStatus","openSnakeBar","Game_Container","components_GameSettings_GameSettings","components_GameOver_GameOver","components_GameBar_GameBar","components_GameBoard_GameBoard","Snackbar_default","open","autoHideDuration","onClose","message","App","components_Game_Game","Boolean","location","hostname","match","__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.2b03fe07.chunk.js","sourcesContent":["import React, {PureComponent} from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport Flag from '../../assets/svg/flag.svg';\r\nimport Bomb from '../../assets/svg/bomb.svg';\r\n\r\nconst Container = styled.div`\r\n  display: inline-flex;\r\n  border: solid 1px;\r\n  height: 30px;\r\n  width: 30px;\r\n  font-size: 16px;\r\n  cursor: pointer;\r\n  border-radius: 2px;\r\n  justify-content: center;\r\n  border: 1px outset white;\r\n  background-color: #d8d8d8;\r\n  \r\n  ${({isRevealed, isFlagged, isSupermanMode}) => !isRevealed && !isFlagged && isSupermanMode &&\r\n  css`\r\n    opacity: 0.5\r\n  `};\r\n  \r\n  :hover {\r\n    background-color: #d1dbff;\r\n  }\r\n  \r\n  ${({isRevealed}) => isRevealed &&\r\n  css`\r\n    cursor: default;\r\n    border: 1px solid #909090;\r\n    background-color: #cacaca;\r\n    \r\n    :hover {\r\n      background-color: #cacaca;\r\n    }\r\n  `};\r\n`\r\n\r\nconst Item = styled.div`\r\n  display: inline-block;\r\n  align-self: center;\r\n  user-select: none;\r\n  font-weight: 600;\r\n  color: black;\r\n`\r\n\r\nconst FlagImage = styled.img`\r\n  width: 13px;\r\n`\r\n\r\nconst BombImage = styled.img`\r\n  width: 13px;\r\n`\r\n\r\nclass GameBoardCell extends PureComponent {\r\n  constructor(){\r\n    super();\r\n\r\n    this.handleCellClick = this.handleCellClick.bind(this);\r\n  }\r\n\r\n  handleCellClick(event){\r\n    const {onClick, row, column} = this.props;\r\n    const isShiftKey = event.shiftKey === true;\r\n\r\n    onClick(row, column, isShiftKey);\r\n  }\r\n\r\n  renderItemContent(){\r\n    const {isRevealed, isMine, numberOfNearbyMines, isFlagged, isSupermanMode} = this.props;\r\n    let ItemContent = '\\u00a0';\r\n\r\n    if(isFlagged) {\r\n      ItemContent = <FlagImage src={Flag} alt='Flag'/>\r\n    } else if(isRevealed || isSupermanMode) {\r\n      if(isMine){\r\n        ItemContent = <BombImage src={Bomb} alt='Bomb'/>;\r\n      } else if (numberOfNearbyMines > 0){\r\n        ItemContent = <span style={{color: this.getNumberOfNearbyMinesItemContentColor()}}>{numberOfNearbyMines}</span>\r\n      }\r\n    }\r\n\r\n    return ItemContent;\r\n  }\r\n\r\n  getNumberOfNearbyMinesItemContentColor(){\r\n    const {numberOfNearbyMines} = this.props;\r\n\r\n    let color = '';\r\n    switch (numberOfNearbyMines) {\r\n      case 1:\r\n        color = '#0a3fff';\r\n        break;\r\n      case 2:\r\n        color = '#08abb3';\r\n        break;\r\n      case 3:\r\n        color = '#ff0000';\r\n        break;\r\n      case 4:\r\n        color = '#ff00f7';\r\n        break;\r\n      case 5:\r\n        color = '#ff8100';\r\n        break;\r\n      case 6:\r\n        color = '#000000';\r\n        break;\r\n      case 7:\r\n        color = '#6baf12';\r\n        break;\r\n      case 8:\r\n        color = '#0bca69';\r\n        break;\r\n      default:\r\n    }\r\n\r\n    return color;\r\n  }\r\n\r\n  render() {\r\n    const {isRevealed, isSupermanMode, isFlagged} = this.props;\r\n\r\n    return (\r\n      <Container onClick={this.handleCellClick} isRevealed={isRevealed} isFlagged={isFlagged} isSupermanMode={isSupermanMode}>\r\n        <Item>\r\n          {this.renderItemContent()}\r\n        </Item>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default GameBoardCell;","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport GameBoardCell from \"./GameBoardCell\";\r\n\r\nconst Container = styled.div`\r\n  border: 2px solid #d6d6d6;\r\n  border-radius: 2px;\r\n  margin: 10px;\r\n`\r\n\r\nclass GameBoard extends Component {\r\n\r\n  render() {\r\n    const {board, onCellClick, isSupermanMode} = this.props;\r\n    return (\r\n      <Container>\r\n        {\r\n          board.map((row, rowIndex) => (\r\n            <div key={rowIndex}>\r\n              {\r\n                row.map((cell, columnIndex)=>\r\n                  <GameBoardCell  key={columnIndex} {...cell} onClick={onCellClick} isSupermanMode={isSupermanMode}/>)\r\n              }\r\n            </div>\r\n          ))\r\n        }\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoard;","export const createNewGameObject = (width, height, mines) => {\r\n  return {\r\n    gameBoard: generateGameBoard(width, height, mines),\r\n    flags: mines,\r\n    incorrectFlags: 0,\r\n    isWin: false,\r\n    isLose: false,\r\n    isSupermenMode: false,\r\n  }\r\n}\r\n\r\nconst generateGameBoard = (width, height, mines) => {\r\n  const gameBoard =  Array.from({length: height}, (value, row) => Array.from({length: width}, (value, column) => (\r\n    {\r\n      row,\r\n      column,\r\n      isRevealed: false,\r\n      isMine: false,\r\n      numberOfNearbyMines: 0,\r\n      isFlagged: false\r\n    }\r\n  )));\r\n\r\n  setMinesCells(gameBoard, mines);\r\n  setNonMinesCells(gameBoard);\r\n  return gameBoard;\r\n}\r\n\r\nconst setNonMinesCells = (gameBoard) => {\r\n  gameBoard.forEach((row) => {\r\n    row.forEach((cell) => {\r\n      cell.numberOfNearbyMines = countCellNearbyMines(gameBoard, cell);\r\n    })\r\n  });\r\n\r\n  return gameBoard;\r\n}\r\n\r\nexport const revealBoard = (gameBoard) => {\r\n  gameBoard.forEach(row => row.forEach(cell => cell.isRevealed = true));\r\n}\r\n\r\nexport const revealCell = (gameBoard, cell) => {\r\n  cell.isRevealed = true;\r\n  if (cell.isMine) {\r\n    return false;\r\n  } else if (cell.numberOfNearbyMines === 0) {\r\n    cell.isRevealed = true;\r\n    let emptyCellsToReveal = [cell];\r\n\r\n    do {\r\n      let emptyCellToReveal = emptyCellsToReveal.pop();\r\n\r\n      if (emptyCellToReveal.numberOfNearbyMines === 0) {\r\n        let emptyCellsAdjacent = getCellAdjacentCells(gameBoard, emptyCellToReveal).filter(isRevealableCell);\r\n        emptyCellsAdjacent.forEach(cell => cell.isRevealed = true);\r\n        emptyCellsToReveal = emptyCellsToReveal.concat(emptyCellsAdjacent.filter(cell => cell.numberOfNearbyMines === 0))\r\n      }\r\n    } while (emptyCellsToReveal.length !== 0);\r\n  }\r\n}\r\n\r\nconst isRevealableCell = (cell) => (!cell.isMine && !cell.isRevealed && !cell.isFlagged);\r\n\r\nconst countCellNearbyMines = (gameBoard, cell) => {\r\n  let nearbyMines = 0;\r\n\r\n  if(!cell.isMine) {\r\n    const adjacentCells = getCellAdjacentCells(gameBoard, cell);\r\n    nearbyMines = adjacentCells.reduce((totalMines, cell) => cell.isMine ? totalMines + 1 : totalMines, 0);\r\n  }\r\n\r\n  return nearbyMines;\r\n}\r\n\r\nconst getCellAdjacentCells = (gameBoard, cell) => {\r\n  const gameBoardWidth = gameBoard[0].length;\r\n  const gameBoardHeight = gameBoard.length;\r\n  const { row: cellRow, column : cellColumn} = cell;\r\n\r\n  const adjacentCells = [];\r\n\r\n  //Top-left\r\n  if(cellRow - 1 >= 0 && cellColumn - 1 >= 0) {\r\n    adjacentCells.push(gameBoard[cellRow - 1][cellColumn - 1]);\r\n  }\r\n  //Top\r\n  if(cellRow - 1 >= 0) {\r\n    adjacentCells.push(gameBoard[cellRow - 1][cellColumn]);\r\n  }\r\n  //Top-right\r\n  if(cellRow - 1 >= 0 && cellColumn + 1 < gameBoardWidth) {\r\n    adjacentCells.push(gameBoard[cellRow - 1][cellColumn + 1]);\r\n  }\r\n  //Right\r\n  if(cellColumn + 1 < gameBoardWidth) {\r\n    adjacentCells.push(gameBoard[cellRow][cellColumn + 1]);\r\n  }\r\n  //Bottom-right\r\n  if(cellRow + 1 < gameBoardHeight && cellColumn + 1 < gameBoardWidth) {\r\n    adjacentCells.push(gameBoard[cellRow + 1][cellColumn + 1]);\r\n  }\r\n  //Bottom\r\n  if(cellRow + 1 < gameBoardHeight) {\r\n    adjacentCells.push(gameBoard[cellRow + 1][cellColumn]);\r\n  }\r\n  //Bottom-left\r\n  if(cellRow + 1 < gameBoardHeight && cellColumn - 1 >= 0) {\r\n    adjacentCells.push(gameBoard[cellRow + 1][cellColumn - 1]);\r\n  }\r\n  //Left\r\n  if(cellColumn - 1 >= 0) {\r\n    adjacentCells.push(gameBoard[cellRow][cellColumn - 1]);\r\n  }\r\n\r\n  return adjacentCells;\r\n}\r\n\r\nconst setMinesCells = (gameBoard, mines) => {\r\n  const minesCellsNumbers = new Set();\r\n  const gameBoardWidth = gameBoard[0].length;\r\n  const gameBoardHeight = gameBoard.length;\r\n  const totalCellsNumber = gameBoardWidth * gameBoardHeight;\r\n\r\n  while(mines > 0 ){\r\n    let mineSet = false;\r\n    let randomCellNumber = Math.floor((Math.random() * ((totalCellsNumber) - 1)));\r\n    do {\r\n      if(minesCellsNumbers.has(randomCellNumber)){\r\n        randomCellNumber = (randomCellNumber + 1) % totalCellsNumber;\r\n      } else {\r\n        minesCellsNumbers.add(randomCellNumber);\r\n        mineSet = true;\r\n      }\r\n    } while (!mineSet)\r\n\r\n    mines--;\r\n  }\r\n\r\n  minesCellsNumbers.forEach(mineCellNumber => gameBoard[Math.floor(mineCellNumber / gameBoardWidth)][mineCellNumber % gameBoardWidth].isMine = true)\r\n\r\n  return gameBoard;\r\n}\r\n\r\nexport const handleChangeCellFlagStatus = (cell, gameBoard, flags, incorrectFlags) => {\r\n  if (!cell.isRevealed && (cell.isFlagged || flags > 0)) {\r\n    cell.isFlagged = !cell.isFlagged;\r\n    let isWin = false;\r\n    const flagsNewValue = flags + (cell.isFlagged ? -1 : 1);\r\n\r\n    if (!cell.isMine) {\r\n      incorrectFlags = cell.isFlagged ? incorrectFlags + 1 : incorrectFlags - 1;\r\n    }\r\n\r\n    if (flagsNewValue === 0 && incorrectFlags === 0) {\r\n      isWin = true;\r\n      revealBoard(gameBoard);\r\n    }\r\n\r\n    return {\r\n      gameBoard,\r\n      isWin,\r\n      flags: flagsNewValue,\r\n      incorrectFlags\r\n    }\r\n  }\r\n}\r\n\r\nexport const handleRevealCell = (cell, gameBoard) => {\r\n  if (!cell.isFlagged && !cell.isRevealed) {\r\n    let isLose = false;\r\n\r\n    if (cell.isMine) {\r\n      isLose = true;\r\n      revealBoard(gameBoard);\r\n    } else {\r\n      revealCell(gameBoard, cell);\r\n    }\r\n\r\n    return {\r\n      gameBoard,\r\n      isLose\r\n    }\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nexport const DEFAULT_WIDTH = 8;\r\nexport const DEFAULT_HEIGHT = 8;\r\nexport const DEFAULT_MINES = 16;\r\nexport const MAX_SIZE = 300;\r\n\r\nconst PERSIST_STORAGE_ID = 'GameSettings';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n  width: 100%;\r\n  padding: 15px 0px;\r\n  background-color: #eaeaea;\r\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), \r\n              0px 4px 5px 0px rgba(0, 0, 0, 0.14), \r\n              0px 1px 10px 0px rgba(0, 0, 0, 0.12);\r\n  margin-bottom: 10px;\r\n`\r\n\r\nconst TextFieldContainer = styled.div`\r\n  display: inline-block;\r\n  width: 70px;\r\n  margin-right: 20px;\r\n`\r\n\r\nclass GameSettings extends Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.state = {\r\n      width: DEFAULT_WIDTH,\r\n      height: DEFAULT_HEIGHT,\r\n      mines: DEFAULT_MINES,\r\n    }\r\n\r\n    this.persistState = this.persistState.bind(this);\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleStartNewGame = this.handleStartNewGame.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState({\r\n      ...JSON.parse(localStorage.getItem(PERSIST_STORAGE_ID))\r\n    })\r\n\r\n    window.addEventListener('beforeunload', this.persistState);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    window.removeEventListener('beforeunload', this.persistState);\r\n  }\r\n\r\n  persistState(){\r\n    localStorage.setItem(PERSIST_STORAGE_ID, JSON.stringify(this.state));\r\n  }\r\n\r\n  handleInputChange(event){\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    });\r\n  }\r\n\r\n  handleStartNewGame(){\r\n    const {onStartNewGame} = this.props;\r\n    let {width, height, mines} = this.state;\r\n\r\n    width = parseInt(width);\r\n    height = parseInt(height);\r\n    mines = parseInt(mines);\r\n\r\n    width = !Number.isInteger(width)? DEFAULT_WIDTH : (width > MAX_SIZE? MAX_SIZE : (width < 1? 1 : width));\r\n    height = !Number.isInteger(height)? DEFAULT_HEIGHT : (height > MAX_SIZE? MAX_SIZE : (height < 1? 1 : height));\r\n\r\n    const totalNumberOfCells = width * height;\r\n    mines = !Number.isInteger(mines)? Math.ceil(totalNumberOfCells / 4) : (mines > totalNumberOfCells? totalNumberOfCells : (mines < 1? 1 : mines));\r\n\r\n    this.setState({\r\n      width,\r\n      height,\r\n      mines\r\n    })\r\n\r\n    onStartNewGame(width, height, mines);\r\n  }\r\n\r\n  render() {\r\n    const {width, height, mines} = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        <TextFieldContainer>\r\n          <TextField\r\n            id='width'\r\n            name='width'\r\n            label='Width'\r\n            value={width}\r\n            onChange={this.handleInputChange}\r\n            type='number'\r\n          />\r\n        </TextFieldContainer>\r\n        <TextFieldContainer>\r\n          <TextField\r\n            id='height'\r\n            name='height'\r\n            label='Weight'\r\n            value={height}\r\n            onChange={this.handleInputChange}\r\n            type='number'\r\n          />\r\n        </TextFieldContainer>\r\n        <TextFieldContainer>\r\n          <TextField\r\n            id='mines'\r\n            name='mines'\r\n            label='Mines'\r\n            value={mines}\r\n            onChange={this.handleInputChange}\r\n            type='number'\r\n          />\r\n        </TextFieldContainer>\r\n        <Button variant='contained' color='primary' onClick={this.handleStartNewGame}>\r\n          New Game\r\n        </Button>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameSettings;","import React, {Component} from 'react';\r\nimport styled from \"styled-components\";\r\nimport Bomb from '../../assets/svg/bomb.svg';\r\nimport SupermanModeOn from \"../../assets/svg/superman_symbol_color.svg\";\r\nimport SupermanModeOff from \"../../assets/svg/superman_symbol_gray.svg\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-shrink: 0;\r\n  justify-content: space-between;\r\n  width: 140px;\r\n`\r\n\r\nconst BarItem = styled.div`\r\n  padding: 5px;\r\n  display: inline-flex;\r\n  justify-content: center;\r\n  align-items: center;   \r\n`\r\n\r\nconst BombImage = styled.img`\r\n  width: 23px;\r\n`\r\n\r\nconst SupermanModeImage = styled.img`\r\n  width: 25px;\r\n  cursor: pointer;\r\n`\r\n\r\nclass GameBar extends Component {\r\n  constructor(){\r\n    super();\r\n\r\n    this.handleSupermanModeChange = this.handleSupermanModeChange.bind(this);\r\n  }\r\n\r\n  handleSupermanModeChange(){\r\n    const {onSupermanModeChange, isSupermanMode} = this.props;\r\n\r\n\r\n    onSupermanModeChange(!isSupermanMode)\r\n  }\r\n\r\n  render() {\r\n    const {mines, isSupermanMode} = this.props;\r\n\r\n    return (\r\n      <Container>\r\n        <BarItem>\r\n          <BombImage src={Bomb} alt='Bombs to flag'/> : {mines}\r\n        </BarItem>\r\n        <BarItem>\r\n          <SupermanModeImage src={isSupermanMode? SupermanModeOn : SupermanModeOff} alt='Superman mode' onClick={this.handleSupermanModeChange}/>\r\n        </BarItem>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBar;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  font-size: 20px;\r\n  color: ${({isWin}) => isWin? 'blue' : 'red'}\r\n`\r\n\r\nconst GameOver = ({isWin, isLose}) => {\r\n  return (\r\n    <Container isWin={isWin}>\r\n      {isWin? 'WIN' : (isLose? 'LOSE' : '\\u00a0')}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default GameOver;","import React, { Component } from 'react';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport GameBoard from \"../GameBoard/GameBoard\";\r\nimport {\r\n  createNewGameObject,\r\n  handleChangeCellFlagStatus,\r\n  handleRevealCell,\r\n} from \"./game-logic\";\r\nimport GameSettings, {DEFAULT_HEIGHT, DEFAULT_MINES, DEFAULT_WIDTH} from \"../GameSettings/GameSettings\";\r\nimport GameBar from \"../GameBar/GameBar\";\r\nimport styled from 'styled-components';\r\nimport GameOver from \"../GameOver/GameOver\";\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  white-space:nowrap;\r\n  background-color: #ffffff;\r\n  height: 100vh;\r\n  color: black;\r\n  user-select: none\r\n`\r\nconst PERSIST_STORAGE_ID = 'Game';\r\nconst NO_FLAGS_LEFT_MESSAGE = 'No flags left';\r\n\r\nclass Game extends Component {\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      ...createNewGameObject(DEFAULT_WIDTH, DEFAULT_HEIGHT, DEFAULT_MINES),\r\n      openSnackbar: true,\r\n      snakebarMessage: ''\r\n    }\r\n\r\n    this.persistState = this.persistState.bind(this);\r\n    this.handleStartNewGame = this.handleStartNewGame.bind(this);\r\n    this.handleGameBoardCellClick = this.handleGameBoardCellClick.bind(this);\r\n    this.handleSupermanModeChange = this.handleSupermanModeChange.bind(this);\r\n    this.handleSnackbarClose = this.handleSnackbarClose.bind(this);\r\n  }\r\n\r\n  handleStartNewGame(width, height, mines){\r\n    this.setState({\r\n      ...createNewGameObject(width, height, mines)\r\n    })\r\n  }\r\n\r\n  handleGameBoardCellClick(cellRow, cellColumn, isShiftKey) {\r\n    const {gameBoard, flags, incorrectFlags} = this.state;\r\n    const cell = gameBoard[cellRow][cellColumn];\r\n\r\n    if (isShiftKey) {\r\n      const updateGameData =  handleChangeCellFlagStatus(cell, gameBoard, flags, incorrectFlags);\r\n\r\n      if(updateGameData != null) {\r\n        this.setState({\r\n          gameBoard: updateGameData.gameBoard,\r\n          isWin: updateGameData.isWin,\r\n          flags: updateGameData.flags,\r\n          incorrectFlags: updateGameData.incorrectFlags\r\n        })\r\n      } else if (!cell.isRevealed) {\r\n        this.openSnakeBar(NO_FLAGS_LEFT_MESSAGE);\r\n      }\r\n    } else {\r\n      const updateGameData = handleRevealCell(cell, gameBoard);\r\n\r\n      if(updateGameData != null) {\r\n        this.setState({\r\n          gameBoard: updateGameData.gameBoard,\r\n          isLose: updateGameData.isLose,\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  handleSupermanModeChange(isSupermanMode){\r\n    this.setState({isSupermanMode})\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState({\r\n      ...JSON.parse(localStorage.getItem(PERSIST_STORAGE_ID))\r\n    })\r\n\r\n    window.addEventListener('beforeunload', this.persistState);\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    window.removeEventListener('beforeunload', this.persistState);\r\n  }\r\n\r\n  persistState(){\r\n    localStorage.setItem(PERSIST_STORAGE_ID, JSON.stringify(this.state));\r\n  }\r\n\r\n  openSnakeBar(snakebarMessage){\r\n    this.setState({\r\n      openSnackbar: true,\r\n      snakebarMessage\r\n    })\r\n  }\r\n\r\n  handleSnackbarClose(){\r\n    this.setState({\r\n      openSnackbar: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {gameBoard, flags, isWin, isLose, isSupermanMode, openSnackbar, snakebarMessage} = this.state;\r\n\r\n    return (\r\n      <Container>\r\n        <GameSettings onStartNewGame={this.handleStartNewGame}/>\r\n        <GameOver isWin={isWin} isLose={isLose}/>\r\n        <GameBar mines={flags} isSupermanMode={isSupermanMode} onSupermanModeChange={this.handleSupermanModeChange}/>\r\n        <GameBoard board={gameBoard} onCellClick={this.handleGameBoardCellClick} isSupermanMode={isSupermanMode}/>\r\n        <Snackbar open={openSnackbar} autoHideDuration={3000} onClose={this.handleSnackbarClose} message={snakebarMessage}\r\n        />\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from \"./components/Game/Game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Game/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nwindow.__MUI_USE_NEXT_TYPOGRAPHY_VARIANTS__ = true\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bomb.23161bf2.svg\";","module.exports = __webpack_public_path__ + \"static/media/flag.88f41955.svg\";","module.exports = __webpack_public_path__ + \"static/media/superman_symbol_color.568c0820.svg\";","module.exports = __webpack_public_path__ + \"static/media/superman_symbol_gray.973c3c1c.svg\";"],"sourceRoot":""}